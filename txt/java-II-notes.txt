================================= OOP PRE-LECTURE RESEARCH QUESTIONS
1. What is the difference between static and instance methods/variables?
Instance method(s) belong to the Object of the class not to the class i.e. they can be called after creating the Object of the class.
Instance method can access the instance methods and instance variables directly.
Instance method can access static variables and static methods directly.
Static methods can access the static variables and static methods directly.
Static methods can’t access instance methods and instance variables directly. They must use reference to object. And static method can’t use this keyword as there is no instance for ‘this’ to refer to.

What is an instance and what is instantiation?
Instance method are methods which require an object of its class to be created before it can be called. To invoke a instance method, we have to create an Object of the class in within which it defined.
Instantiate in Java means to call a constructor of a Class which creates an an instance or object, of the type of that Class. Instantiation allocates the initial memory for the object and returns a reference.

What is an object in Java?
The Object class is the parent class of all the classes in java by default. In other words, it is the topmost class of java. The Object class is beneficial if you want to refer any object whose type you don't know. Notice that parent class reference variable can refer the child class object, know as upcasting.
Object − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.
Object acts like a variable of the class.

What is a class in Java?
Class − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.

What is the difference between a class and an object?
A class is a logical entity while object is a physical entity. A class does not allocate memory space on the other hand object allocates memory space. You can declare class only once but you can create more than one object using a class. Classes can't be manipulated while objects can be manipulated

What is a constructor?
Note that the constructor name must match the class name, and it cannot have a return type (like void).
Also note that the constructor is called when the object is created.
All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.
You can have as many parameters as you want.

What are some additional uses of the ‘final’ keyword?
Final variable - to create constant variables
Final methods - prevents method overriding
Final classes - prevent inheritance (Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another)

What are some uses of the ‘this’ keyword?
to save yourself from needed to use extra variables

What are visibility modifiers?
                Access Levels
Modifier	Class	Package	Subclass   World
public	      Y	        Y	    Y	     Y
protected	  Y	        Y	    Y	     N
no modifier	  Y	        Y	    N	     N
private	      Y	        N	    N	     N


Why use private visibility?


------------------------------------------------------------
================================= OOP INTRO NOTES
-- UP TO NOW --
 - using functions/methods to group together steps for the program to work
-- DEFINITION --
  OOP - Object-oriented programming
  - A programming paradigm where state (data/properties) and behavior (functionality/methods)
    are grouped together (often into objects)
  - Objects in Java are created from classes (a blueprint for an object/instance)
-- ADVANTAGES OF OOP --
  Programming in an Object-oriented way can be used to develop code with a clearer and more modular organization in the following ways:
  - implementation details can be abstracted away making code more readable (Abstraction)
  - restriction of access to various levels of abstraction preventing data inconsistencies (Encapsulation)
  - duplication is minimized through inheritance hierarchies (Inheritance)
  - flexible code where multiple implementations may be swapped out behind a common interface (Polymorphism)
-- THE FOUR PILLARS OF OOP --
  1. Abstraction - keep it clean
  2. Encapsulation - keep it contained
  3. Inheritance - keep it hierarchical (DRY)
  4. Polymorphism - keep it versatile
  https://medium.com/@hamzzza.ahmed95/four-pillars-of-object-oriented-programming-oop-e8d7822aa219
  Today we will focus on Abstraction and Encapsulation.
-- CONCEPTS COVERED --
  - how to create custom classes and objects from these classes
  - defining and using instance and static fields
  - how to control class constructors
  - using the “this” keyword
  - controlling encapsulation with visibility modifiers